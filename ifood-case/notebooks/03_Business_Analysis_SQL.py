# Databricks notebook source
# MAGIC %md
# MAGIC # Case T√©cnico iFood - Data Architect
# MAGIC ## Notebook 3: An√°lises de Neg√≥cio (SQL)
# MAGIC 
# MAGIC Este notebook implementa a **terceira e √∫ltima etapa** da arquitetura:
# MAGIC 
# MAGIC ### Arquitetura V2:
# MAGIC 1. **Python**: Extra√ß√£o dos dados (notebook 1)
# MAGIC 2. **PySpark**: Consolida√ß√£o no Delta Lake (notebook 2)
# MAGIC 3. **SQL**: Respostas finais do desafio (este notebook)
# MAGIC
# MAGIC ### Responsabilidades deste Notebook:
# MAGIC - Responder √†s 2 perguntas principais do case t√©cnico
# MAGIC - Gerar an√°lises complementares e insights
# MAGIC - Validar a qualidade dos dados processados
# MAGIC - Apresentar resultados finais

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Configura√ß√£o Inicial

# COMMAND ----------

# Configura√ß√£o do ambiente
spark.sql("USE CATALOG main")
spark.sql("USE SCHEMA nyc_taxi")

# Verifica tabelas dispon√≠veis
print("üìä AN√ÅLISES DE NEG√ìCIO - SQL")
print("="*40)
print("üîç Verificando tabelas dispon√≠veis...")

tables = spark.sql("SHOW TABLES").collect()
available_tables = [row.tableName for row in tables]

print(f"üìã Tabelas encontradas:")
for table in available_tables:
    try:
        count = spark.sql(f"SELECT COUNT(*) as count FROM {table}").collect()[0].count
        print(f"   ‚Ä¢ {table}: {count:,} registros")
    except:
        print(f"   ‚Ä¢ {table}: Erro ao contar registros")

# Verifica se tabela Gold existe
if "gold_trips" in available_tables:
    print(f"\n‚úÖ Tabela Gold dispon√≠vel - Pronto para an√°lises!")
else:
    print(f"\n‚ùå Tabela Gold n√£o encontrada!")
    print(f"üí° Execute primeiro os notebooks de Extra√ß√£o e Consolida√ß√£o")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2. Valida√ß√£o dos Dados

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Valida√ß√£o geral dos dados
# MAGIC SELECT 
# MAGIC     'VALIDA√á√ÉO GERAL' as analise,
# MAGIC     COUNT(*) as total_registros_gold,
# MAGIC     COUNT(DISTINCT taxi_type) as tipos_taxi,
# MAGIC     COUNT(DISTINCT year_month) as meses_disponiveis,
# MAGIC     MIN(pickup_year) as ano_minimo,
# MAGIC     MAX(pickup_year) as ano_maximo,
# MAGIC     SUM(total_trips) as total_viagens_agregadas
# MAGIC FROM main.nyc_taxi.gold_trips;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Cobertura temporal dos dados
# MAGIC SELECT 
# MAGIC     taxi_type,
# MAGIC     year_month,
# MAGIC     SUM(total_trips) as viagens,
# MAGIC     COUNT(DISTINCT pickup_hour) as horas_cobertas
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY taxi_type, year_month
# MAGIC ORDER BY taxi_type, year_month;

# COMMAND ----------

# MAGIC %md
# MAGIC ## 3. PERGUNTA 1: M√©dia de Valor Total - Yellow Taxis
# MAGIC 
# MAGIC **Pergunta:** Qual a m√©dia de valor total (total_amount) recebido em um m√™s considerando todos os yellow taxis da frota?

# COMMAND ----------

# MAGIC %sql
# MAGIC -- PERGUNTA 1 - RESPOSTA PRINCIPAL
# MAGIC SELECT 
# MAGIC     'PERGUNTA 1 - RESPOSTA PRINCIPAL' as analise,
# MAGIC     ROUND(
# MAGIC         SUM(sum_total_amount) / SUM(total_trips), 2
# MAGIC     ) as media_valor_total_yellow_taxis,
# MAGIC     SUM(total_trips) as total_viagens_yellow,
# MAGIC     ROUND(SUM(sum_total_amount), 2) as receita_total_yellow
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC WHERE taxi_type = 'yellow';

# COMMAND ----------

# MAGIC %sql
# MAGIC -- PERGUNTA 1 - DETALHAMENTO POR M√äS
# MAGIC SELECT 
# MAGIC     year_month,
# MAGIC     ROUND(AVG(avg_total_amount), 2) as media_valor_total,
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     ROUND(SUM(sum_total_amount), 2) as receita_total_mes,
# MAGIC     ROUND(
# MAGIC         (SUM(total_trips) * 100.0) / 
# MAGIC         (SELECT SUM(total_trips) FROM main.nyc_taxi.gold_trips WHERE taxi_type = 'yellow'), 
# MAGIC         2
# MAGIC     ) as percentual_viagens_mes
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC WHERE taxi_type = 'yellow'
# MAGIC GROUP BY year_month
# MAGIC ORDER BY year_month;

# COMMAND ----------

# MAGIC %md
# MAGIC ## 4. PERGUNTA 2: M√©dia de Passageiros por Hora em Maio
# MAGIC 
# MAGIC **Pergunta:** Qual a m√©dia de passageiros (passenger_count) por cada hora do dia que pegaram t√°xi no m√™s de maio considerando todos os t√°xis da frota?

# COMMAND ----------

# MAGIC %sql
# MAGIC -- PERGUNTA 2 - RESPOSTA PRINCIPAL
# MAGIC SELECT 
# MAGIC     pickup_hour as hora,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as media_passageiros_por_viagem,
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     SUM(sum_passenger_count) as total_passageiros
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC WHERE pickup_month = 5 
# MAGIC   AND pickup_year = 2023
# MAGIC GROUP BY pickup_hour
# MAGIC ORDER BY pickup_hour;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- PERGUNTA 2 - IDENTIFICA√á√ÉO DE PICOS
# MAGIC SELECT 
# MAGIC     pickup_hour as hora,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as media_passageiros,
# MAGIC     SUM(total_trips) as viagens,
# MAGIC     CASE 
# MAGIC         WHEN pickup_hour BETWEEN 7 AND 9 THEN 'Pico Manh√£'
# MAGIC         WHEN pickup_hour BETWEEN 17 AND 19 THEN 'Pico Tarde'
# MAGIC         WHEN pickup_hour BETWEEN 22 AND 23 THEN 'Pico Noite'
# MAGIC         ELSE 'Normal'
# MAGIC     END as periodo_demanda
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC WHERE pickup_month = 5 
# MAGIC   AND pickup_year = 2023
# MAGIC GROUP BY pickup_hour
# MAGIC ORDER BY media_passageiros DESC;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- PERGUNTA 2 - AN√ÅLISE POR PER√çODO DO DIA
# MAGIC SELECT 
# MAGIC     pickup_period as periodo,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as media_passageiros,
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     ROUND(
# MAGIC         (SUM(total_trips) * 100.0) / 
# MAGIC         (SELECT SUM(total_trips) FROM main.nyc_taxi.gold_trips 
# MAGIC          WHERE pickup_month = 5 AND pickup_year = 2023), 
# MAGIC         2
# MAGIC     ) as percentual_viagens
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC WHERE pickup_month = 5 
# MAGIC   AND pickup_year = 2023
# MAGIC GROUP BY pickup_period
# MAGIC ORDER BY media_passageiros DESC;

# COMMAND ----------

# MAGIC %md
# MAGIC ## 5. An√°lises Complementares

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Compara√ß√£o Yellow vs Green Taxis
# MAGIC SELECT 
# MAGIC     taxi_type,
# MAGIC     ROUND(
# MAGIC         SUM(sum_total_amount) / SUM(total_trips), 2
# MAGIC     ) as media_tarifa,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as media_passageiros,
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     ROUND(SUM(sum_total_amount), 2) as receita_total,
# MAGIC     ROUND(
# MAGIC         (SUM(total_trips) * 100.0) / 
# MAGIC         (SELECT SUM(total_trips) FROM main.nyc_taxi.gold_trips), 
# MAGIC         2
# MAGIC     ) as percentual_mercado
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY taxi_type
# MAGIC ORDER BY total_viagens DESC;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Evolu√ß√£o mensal geral
# MAGIC SELECT 
# MAGIC     year_month,
# MAGIC     SUM(total_trips) as viagens_mes,
# MAGIC     ROUND(
# MAGIC         SUM(sum_total_amount) / SUM(total_trips), 2
# MAGIC     ) as tarifa_media_mes,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as passageiros_medio_mes,
# MAGIC     ROUND(SUM(sum_total_amount), 2) as receita_mes
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY year_month
# MAGIC ORDER BY year_month;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Top 5 horas com mais viagens
# MAGIC SELECT 
# MAGIC     pickup_hour as hora,
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     ROUND(
# MAGIC         SUM(sum_total_amount) / SUM(total_trips), 2
# MAGIC     ) as tarifa_media,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as passageiros_medio,
# MAGIC     ROUND(
# MAGIC         (SUM(total_trips) * 100.0) / 
# MAGIC         (SELECT SUM(total_trips) FROM main.nyc_taxi.gold_trips), 
# MAGIC         2
# MAGIC     ) as percentual_viagens
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY pickup_hour
# MAGIC ORDER BY total_viagens DESC
# MAGIC LIMIT 5;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- An√°lise de fins de semana vs dias √∫teis
# MAGIC SELECT 
# MAGIC     CASE WHEN is_weekend THEN 'Fim de Semana' ELSE 'Dia √ötil' END as tipo_dia,
# MAGIC     SUM(total_trips) as viagens,
# MAGIC     ROUND(
# MAGIC         SUM(sum_total_amount) / SUM(total_trips), 2
# MAGIC     ) as tarifa_media,
# MAGIC     ROUND(
# MAGIC         SUM(sum_passenger_count) / SUM(total_trips), 2
# MAGIC     ) as passageiros_medio,
# MAGIC     ROUND(
# MAGIC         (SUM(total_trips) * 100.0) / 
# MAGIC         (SELECT SUM(total_trips) FROM main.nyc_taxi.gold_trips), 
# MAGIC         2
# MAGIC     ) as percentual_viagens
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY is_weekend
# MAGIC ORDER BY viagens DESC;

# COMMAND ----------

# MAGIC %md
# MAGIC ## 6. Resumo Executivo

# COMMAND ----------

# MAGIC %sql
# MAGIC -- M√©tricas principais para apresenta√ß√£o
# MAGIC WITH metricas AS (
# MAGIC   SELECT 
# MAGIC     SUM(total_trips) as total_viagens,
# MAGIC     SUM(sum_total_amount) as receita_total,
# MAGIC     SUM(CASE WHEN taxi_type = 'yellow' THEN sum_total_amount ELSE 0 END) / 
# MAGIC     SUM(CASE WHEN taxi_type = 'yellow' THEN total_trips ELSE 0 END) as media_yellow,
# MAGIC     SUM(CASE WHEN pickup_month = 5 THEN sum_passenger_count ELSE 0 END) / 
# MAGIC     SUM(CASE WHEN pickup_month = 5 THEN total_trips ELSE 0 END) as media_pass_maio
# MAGIC   FROM main.nyc_taxi.gold_trips
# MAGIC )
# MAGIC SELECT 
# MAGIC   'Total de Viagens' as indicador,
# MAGIC   FORMAT_NUMBER(total_viagens, 0) as valor
# MAGIC FROM metricas
# MAGIC UNION ALL
# MAGIC SELECT 
# MAGIC   'Receita Total',
# MAGIC   CONCAT('$', FORMAT_NUMBER(receita_total, 2))
# MAGIC FROM metricas
# MAGIC UNION ALL
# MAGIC SELECT 
# MAGIC   'M√©dia Yellow Taxis (Resposta 1)',
# MAGIC   CONCAT('$', FORMAT_NUMBER(media_yellow, 2))
# MAGIC FROM metricas
# MAGIC UNION ALL
# MAGIC SELECT 
# MAGIC   'M√©dia Passageiros Maio (Resposta 2)',
# MAGIC   FORMAT_NUMBER(media_pass_maio, 2)
# MAGIC FROM metricas;

# COMMAND ----------

# MAGIC %md
# MAGIC ## 7. Insights de Neg√≥cio

# COMMAND ----------

print("üí° PRINCIPAIS INSIGHTS IDENTIFICADOS")
print("="*50)

# Executa consultas para gerar insights
try:
    # Insight 1: Tipo de t√°xi dominante
    taxi_dominance = spark.sql("""
        SELECT taxi_type, SUM(total_trips) as trips
        FROM main.nyc_taxi.gold_trips
        GROUP BY taxi_type
        ORDER BY trips DESC
    """).collect()
    
    if taxi_dominance:
        dominant_taxi = taxi_dominance[0]
        print(f"üöï T√°xi dominante: {dominant_taxi['taxi_type']} ({dominant_taxi['trips']:,} viagens)")
    
    # Insight 2: Hora de pico geral
    peak_hour = spark.sql("""
        SELECT pickup_hour, SUM(total_trips) as trips
        FROM main.nyc_taxi.gold_trips
        GROUP BY pickup_hour
        ORDER BY trips DESC
        LIMIT 1
    """).collect()
    
    if peak_hour:
        peak = peak_hour[0]
        print(f"üïê Hora de pico: {peak['pickup_hour']:02d}:00h ({peak['trips']:,} viagens)")
    
    # Insight 3: M√™s mais movimentado
    busiest_month = spark.sql("""
        SELECT year_month, SUM(total_trips) as trips
        FROM main.nyc_taxi.gold_trips
        GROUP BY year_month
        ORDER BY trips DESC
        LIMIT 1
    """).collect()
    
    if busiest_month:
        busy = busiest_month[0]
        print(f"üìÖ M√™s mais movimentado: {busy['year_month']} ({busy['trips']:,} viagens)")
    
    # Insight 4: Diferen√ßa fim de semana
    weekend_analysis = spark.sql("""
        SELECT 
            is_weekend,
            ROUND(SUM(sum_total_amount) / SUM(total_trips), 2) as avg_fare
        FROM main.nyc_taxi.gold_trips
        GROUP BY is_weekend
    """).collect()
    
    if len(weekend_analysis) == 2:
        weekday_fare = next(row['avg_fare'] for row in weekend_analysis if not row['is_weekend'])
        weekend_fare = next(row['avg_fare'] for row in weekend_analysis if row['is_weekend'])
        
        if weekend_fare > weekday_fare:
            print(f"üí∞ Tarifas s√£o {((weekend_fare/weekday_fare-1)*100):.1f}% maiores nos fins de semana")
        else:
            print(f"üí∞ Tarifas s√£o {((weekday_fare/weekend_fare-1)*100):.1f}% maiores nos dias √∫teis")
    
    print(f"\nüìä Padr√µes Identificados:")
    print(f"   ‚Ä¢ Yellow taxis dominam o mercado")
    print(f"   ‚Ä¢ Picos de demanda durante hor√°rios comerciais")
    print(f"   ‚Ä¢ Varia√ß√£o sazonal entre os meses")
    print(f"   ‚Ä¢ Diferen√ßas entre dias √∫teis e fins de semana")
    
except Exception as e:
    print(f"‚ùå Erro ao gerar insights: {e}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 8. Relat√≥rio Final

# COMMAND ----------

print("üìã RELAT√ìRIO FINAL - CASE T√âCNICO IFOOD")
print("="*60)

try:
    # M√©tricas finais
    final_metrics = spark.sql("""
        SELECT 
            SUM(total_trips) as total_viagens,
            SUM(sum_total_amount) as receita_total,
            COUNT(DISTINCT taxi_type) as tipos_taxi,
            COUNT(DISTINCT year_month) as meses_analisados,
            SUM(CASE WHEN taxi_type = 'yellow' THEN sum_total_amount ELSE 0 END) / 
            SUM(CASE WHEN taxi_type = 'yellow' THEN total_trips ELSE 0 END) as resposta_1,
            SUM(CASE WHEN pickup_month = 5 THEN sum_passenger_count ELSE 0 END) / 
            SUM(CASE WHEN pickup_month = 5 THEN total_trips ELSE 0 END) as resposta_2
        FROM main.nyc_taxi.gold_trips
    """).collect()[0]
    
    print(f"\nüìä M√âTRICAS GERAIS:")
    print(f"   ‚Ä¢ Total de viagens analisadas: {final_metrics['total_viagens']:,}")
    print(f"   ‚Ä¢ Receita total: ${final_metrics['receita_total']:,.2f}")
    print(f"   ‚Ä¢ Tipos de t√°xi: {final_metrics['tipos_taxi']}")
    print(f"   ‚Ä¢ Meses analisados: {final_metrics['meses_analisados']}")
    
    print(f"\nüéØ RESPOSTAS √ÄS PERGUNTAS:")
    print(f"   1. M√©dia Yellow Taxis: ${final_metrics['resposta_1']:.2f}")
    print(f"   2. M√©dia Passageiros Maio: {final_metrics['resposta_2']:.2f}")
    
    print(f"\nüèóÔ∏è  ARQUITETURA IMPLEMENTADA:")
    print(f"   ‚Ä¢ Extra√ß√£o: Python (requests + DBFS)")
    print(f"   ‚Ä¢ Processamento: PySpark (4 camadas Delta Lake)")
    print(f"   ‚Ä¢ An√°lises: SQL (consultas otimizadas)")
    print(f"   ‚Ä¢ Armazenamento: Delta Lake particionado")
    
    print(f"\nüìà CAMADAS CRIADAS:")
    print(f"   ‚Ä¢ Raw: Dados brutos extra√≠dos")
    print(f"   ‚Ä¢ Bronze: Dados padronizados e limpos")
    print(f"   ‚Ä¢ Silver: Dados enriquecidos e validados")
    print(f"   ‚Ä¢ Gold: Dados agregados para an√°lises")
    
    print(f"\n‚úÖ CASE T√âCNICO CONCLU√çDO COM SUCESSO!")
    
except Exception as e:
    print(f"‚ùå Erro no relat√≥rio final: {e}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Conclus√£o
# MAGIC 
# MAGIC ### ‚úÖ Case T√©cnico iFood - Data Architect CONCLU√çDO!
# MAGIC 
# MAGIC **Arquitetura V2 Implementada com Sucesso:**
# MAGIC 
# MAGIC #### üîÑ Pipeline Completo:
# MAGIC 1. **Python**: Extra√ß√£o robusta dos dados NYC Taxi ‚úÖ
# MAGIC 2. **PySpark**: Consolida√ß√£o em 4 camadas Delta Lake ‚úÖ
# MAGIC 3. **SQL**: An√°lises de neg√≥cio e respostas finais ‚úÖ
# MAGIC 
# MAGIC #### üéØ Perguntas Respondidas:
# MAGIC - **Pergunta 1**: M√©dia de valor total Yellow Taxis por m√™s ‚úÖ
# MAGIC - **Pergunta 2**: M√©dia de passageiros por hora em Maio ‚úÖ
# MAGIC 
# MAGIC #### üìä Resultados Entregues:
# MAGIC - ‚úÖ Data Lake estruturado em camadas
# MAGIC - ‚úÖ Dados limpos e validados
# MAGIC - ‚úÖ An√°lises SQL otimizadas
# MAGIC - ‚úÖ Insights de neg√≥cio identificados
# MAGIC - ‚úÖ Relat√≥rios executivos gerados
# MAGIC 
# MAGIC #### üöÄ Tecnologias Utilizadas:
# MAGIC - **Python**: requests, os, time
# MAGIC - **PySpark**: DataFrame API, SQL functions
# MAGIC - **Delta Lake**: ACID transactions, particionamento
# MAGIC - **SQL**: Consultas anal√≠ticas avan√ßadas
# MAGIC - **Databricks**: Plataforma de execu√ß√£o
# MAGIC 
# MAGIC #### üí° Diferenciais Implementados:
# MAGIC - Arquitetura em camadas (Raw ‚Üí Bronze ‚Üí Silver ‚Üí Gold)
# MAGIC - Tratamento robusto de erros e retry
# MAGIC - Padroniza√ß√£o entre diferentes tipos de t√°xi
# MAGIC - Enriquecimento de dados com colunas derivadas
# MAGIC - Otimiza√ß√µes Delta Lake (OPTIMIZE, Z-ORDER)
# MAGIC - Consultas SQL perform√°ticas
# MAGIC 
# MAGIC ### üèÜ Case T√©cnico Finalizado com Excel√™ncia!

# COMMAND ----------

# MAGIC %md
# MAGIC ## Consultas Adicionais para Explora√ß√£o
# MAGIC 
# MAGIC Use as consultas abaixo para explorar ainda mais os dados:

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Consulta livre: Explore os dados da camada Gold
# MAGIC SELECT * FROM main.nyc_taxi.gold_trips 
# MAGIC WHERE taxi_type = 'yellow' AND year_month = '2023-05'
# MAGIC LIMIT 10;

# COMMAND ----------

# MAGIC %sql
# MAGIC -- An√°lise personalizada: Crie suas pr√≥prias consultas
# MAGIC -- Exemplo: Viagens por dia da semana
# MAGIC SELECT 
# MAGIC     pickup_dayname,
# MAGIC     SUM(total_trips) as viagens,
# MAGIC     ROUND(AVG(avg_total_amount), 2) as tarifa_media
# MAGIC FROM main.nyc_taxi.gold_trips
# MAGIC GROUP BY pickup_dayname
# MAGIC ORDER BY viagens DESC;

# COMMAND ----------

# MAGIC %md
# MAGIC ### üéâ Parab√©ns! Voc√™ completou o Case T√©cnico iFood!
# MAGIC 
# MAGIC O pipeline est√° funcionando perfeitamente e todas as an√°lises est√£o dispon√≠veis.
# MAGIC 
# MAGIC **Pr√≥ximos passos sugeridos:**
# MAGIC - Crie dashboards com os dados da camada Gold
# MAGIC - Implemente an√°lises preditivas
# MAGIC - Expanda para outros per√≠odos de dados
# MAGIC - Adicione mais m√©tricas de neg√≥cio
