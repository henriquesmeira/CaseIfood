# Databricks notebook source
# MAGIC %md
# MAGIC # Case T√©cnico iFood - Data Architect
# MAGIC ## Notebook 3: An√°lise Explorat√≥ria
# MAGIC 
# MAGIC Este notebook realiza uma an√°lise explorat√≥ria completa dos dados de t√°xi NYC para:
# MAGIC - Entender padr√µes e tend√™ncias nos dados
# MAGIC - Identificar insights de neg√≥cio
# MAGIC - Validar qualidade dos dados
# MAGIC - Gerar visualiza√ß√µes e estat√≠sticas descritivas

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Configura√ß√£o e Carregamento

# COMMAND ----------

from pyspark.sql.functions import (
    col, count, avg, sum as spark_sum, min as spark_min, max as spark_max,
    hour, dayofweek, when, desc, asc, percentile_approx, stddev, 
    year, month, date_format
)
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Configura√ß√£o da tabela
full_table_name = "main.nyc_taxi.trips_delta"

# Carrega os dados
df = spark.table(full_table_name)

print(f"üìä AN√ÅLISE EXPLORAT√ìRIA - DADOS NYC TAXI")
print("="*60)
print(f"üìà Dataset carregado: {full_table_name}")
print(f"   ‚Ä¢ Total de registros: {df.count():,}")
print(f"   ‚Ä¢ Total de colunas: {len(df.columns)}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2. Vis√£o Geral do Schema e Dados

# COMMAND ----------

print("üìã Schema da Tabela:")
df.printSchema()

print("\nüîç Amostra dos dados:")
df.limit(5).show(truncate=False)

print("\nüìä Estat√≠sticas b√°sicas:")
df.describe().show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 3. Distribui√ß√£o dos Dados

# COMMAND ----------

print("üìä DISTRIBUI√á√ÉO DOS DADOS")
print("="*50)

# Distribui√ß√£o por tipo de t√°xi
print("\nüöï Distribui√ß√£o por Tipo de T√°xi:")
taxi_dist = (
    df
    .groupBy("taxi_type")
    .agg(
        count("*").alias("total_trips"),
        avg("total_amount").alias("avg_fare"),
        spark_sum("total_amount").alias("total_revenue")
    )
    .orderBy("total_trips", ascending=False)
)
taxi_dist.show(truncate=False)

# Distribui√ß√£o por m√™s
print("\nüìÖ Distribui√ß√£o por M√™s:")
monthly_dist = (
    df
    .groupBy("year_month")
    .agg(
        count("*").alias("total_trips"),
        avg("total_amount").alias("avg_fare"),
        avg("passenger_count").alias("avg_passengers")
    )
    .orderBy("year_month")
)
monthly_dist.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 4. An√°lise Temporal Detalhada

# COMMAND ----------

print("‚è∞ AN√ÅLISE TEMPORAL")
print("="*40)

# Padr√£o por hora do dia
print("\nüïê Distribui√ß√£o por Hora do Dia:")
hourly_pattern = (
    df
    .filter(col("tpep_pickup_datetime").isNotNull())
    .withColumn("pickup_hour", hour(col("tpep_pickup_datetime")))
    .groupBy("pickup_hour")
    .agg(
        count("*").alias("trip_count"),
        avg("total_amount").alias("avg_fare"),
        avg("passenger_count").alias("avg_passengers")
    )
    .orderBy("pickup_hour")
)
hourly_pattern.show(24, truncate=False)

# Identifica picos de demanda
print("\nüìà Top 5 Horas com Mais Viagens:")
peak_hours = (
    hourly_pattern
    .orderBy(desc("trip_count"))
    .limit(5)
)
peak_hours.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 5. An√°lise por Dia da Semana

# COMMAND ----------

print("üìÜ AN√ÅLISE POR DIA DA SEMANA")
print("="*40)

# Distribui√ß√£o por dia da semana
weekday_dist = (
    df
    .filter(col("tpep_pickup_datetime").isNotNull())
    .withColumn("day_of_week", dayofweek(col("tpep_pickup_datetime")))
    .withColumn("day_name", 
        when(col("day_of_week") == 1, "Domingo")
        .when(col("day_of_week") == 2, "Segunda")
        .when(col("day_of_week") == 3, "Ter√ßa")
        .when(col("day_of_week") == 4, "Quarta")
        .when(col("day_of_week") == 5, "Quinta")
        .when(col("day_of_week") == 6, "Sexta")
        .when(col("day_of_week") == 7, "S√°bado")
    )
    .groupBy("day_of_week", "day_name")
    .agg(
        count("*").alias("total_trips"),
        avg("total_amount").alias("avg_fare"),
        avg("passenger_count").alias("avg_passengers")
    )
    .orderBy("day_of_week")
)
weekday_dist.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 6. An√°lise de Tarifas

# COMMAND ----------

print("üí∞ AN√ÅLISE DE TARIFAS")
print("="*30)

# Estat√≠sticas descritivas de tarifas
print("\nüìä Estat√≠sticas Detalhadas de Total Amount:")
fare_stats = (
    df
    .filter(col("total_amount").isNotNull() & (col("total_amount") > 0))
    .agg(
        spark_min("total_amount").alias("min_fare"),
        percentile_approx("total_amount", 0.25).alias("q1_fare"),
        percentile_approx("total_amount", 0.5).alias("median_fare"),
        avg("total_amount").alias("mean_fare"),
        percentile_approx("total_amount", 0.75).alias("q3_fare"),
        percentile_approx("total_amount", 0.95).alias("p95_fare"),
        spark_max("total_amount").alias("max_fare"),
        stddev("total_amount").alias("std_fare")
    )
)
fare_stats.show(truncate=False)

# Distribui√ß√£o por faixas de tarifa
print("\nüíµ Distribui√ß√£o por Faixas de Tarifa:")
total_trips = df.count()
fare_ranges = (
    df
    .filter(col("total_amount").isNotNull() & (col("total_amount") > 0))
    .withColumn("fare_range",
        when(col("total_amount") <= 10, "$0-10")
        .when(col("total_amount") <= 20, "$10-20")
        .when(col("total_amount") <= 30, "$20-30")
        .when(col("total_amount") <= 50, "$30-50")
        .when(col("total_amount") <= 100, "$50-100")
        .otherwise("$100+")
    )
    .groupBy("fare_range")
    .agg(count("*").alias("trip_count"))
    .withColumn("percentage", (col("trip_count") * 100.0 / total_trips))
    .orderBy("trip_count", ascending=False)
)
fare_ranges.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 7. An√°lise de Passageiros

# COMMAND ----------

print("üë• AN√ÅLISE DE PASSAGEIROS")
print("="*35)

# Distribui√ß√£o por n√∫mero de passageiros
print("\nüìä Distribui√ß√£o por N√∫mero de Passageiros:")
passenger_dist = (
    df
    .filter(col("passenger_count").isNotNull() & (col("passenger_count") > 0))
    .groupBy("passenger_count")
    .agg(
        count("*").alias("trip_count"),
        avg("total_amount").alias("avg_fare"),
        (count("*") * 100.0 / df.count()).alias("percentage")
    )
    .orderBy("passenger_count")
)
passenger_dist.show(truncate=False)

# Passageiros por tipo de t√°xi
print("\nüöï An√°lise de Passageiros por Tipo de T√°xi:")
passenger_by_type = (
    df
    .filter(col("passenger_count").isNotNull() & (col("passenger_count") > 0))
    .groupBy("taxi_type")
    .agg(
        avg("passenger_count").alias("avg_passengers"),
        spark_sum("passenger_count").alias("total_passengers"),
        count("*").alias("total_trips")
    )
)
passenger_by_type.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 8. An√°lise de Qualidade dos Dados

# COMMAND ----------

print("üîç AN√ÅLISE DE QUALIDADE DOS DADOS")
print("="*45)

total_records = df.count()

# An√°lise de valores nulos
print("\n‚ùå Valores Nulos por Coluna:")
for col_name in df.columns:
    null_count = df.filter(col(col_name).isNull()).count()
    if null_count > 0:
        null_percentage = (null_count / total_records) * 100
        print(f"   ‚Ä¢ {col_name}: {null_count:,} nulos ({null_percentage:.2f}%)")

# Valores extremos e inconsist√™ncias
print("\n‚ö†Ô∏è An√°lise de Valores Extremos:")

# Tarifas negativas ou zero
negative_fares = df.filter(col("total_amount") <= 0).count()
print(f"   ‚Ä¢ Tarifas <= 0: {negative_fares:,} registros ({(negative_fares/total_records)*100:.2f}%)")

# Passageiros zero
zero_passengers = df.filter(col("passenger_count") == 0).count()
print(f"   ‚Ä¢ Viagens com 0 passageiros: {zero_passengers:,} registros ({(zero_passengers/total_records)*100:.2f}%)")

# Tarifas muito altas (outliers)
high_fares = df.filter(col("total_amount") > 200).count()
print(f"   ‚Ä¢ Tarifas > $200: {high_fares:,} registros ({(high_fares/total_records)*100:.2f}%)")

# Muitos passageiros (outliers)
many_passengers = df.filter(col("passenger_count") > 6).count()
print(f"   ‚Ä¢ Viagens com > 6 passageiros: {many_passengers:,} registros ({(many_passengers/total_records)*100:.2f}%)")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 9. An√°lise Comparativa Yellow vs Green

# COMMAND ----------

print("üöï AN√ÅLISE COMPARATIVA: YELLOW vs GREEN TAXIS")
print("="*55)

# Compara√ß√£o detalhada
comparison = (
    df
    .filter(col("total_amount").isNotNull() & (col("total_amount") > 0))
    .groupBy("taxi_type")
    .agg(
        count("*").alias("total_trips"),
        avg("total_amount").alias("avg_fare"),
        spark_sum("total_amount").alias("total_revenue"),
        avg("passenger_count").alias("avg_passengers"),
        spark_sum("passenger_count").alias("total_passengers"),
        percentile_approx("total_amount", 0.5).alias("median_fare"),
        spark_max("total_amount").alias("max_fare")
    )
)
comparison.show(truncate=False)

# Evolu√ß√£o mensal por tipo
print("\nüìà Evolu√ß√£o Mensal por Tipo de T√°xi:")
monthly_by_type = (
    df
    .filter(col("total_amount").isNotNull() & (col("total_amount") > 0))
    .groupBy("year_month", "taxi_type")
    .agg(
        count("*").alias("trips"),
        avg("total_amount").alias("avg_fare")
    )
    .orderBy("year_month", "taxi_type")
)
monthly_by_type.show(truncate=False)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 10. Insights e Padr√µes Identificados

# COMMAND ----------

print("üí° PRINCIPAIS INSIGHTS IDENTIFICADOS")
print("="*50)

# Calcula alguns insights chave
insights_data = {}

# Tipo de t√°xi mais popular
most_popular = df.groupBy("taxi_type").count().orderBy(desc("count")).first()
insights_data['most_popular_taxi'] = (most_popular['taxi_type'], most_popular['count'])

# M√™s mais movimentado
busiest_month = df.groupBy("year_month").count().orderBy(desc("count")).first()
insights_data['busiest_month'] = (busiest_month['year_month'], busiest_month['count'])

# Hora de pico
peak_hour_data = (
    df
    .filter(col("tpep_pickup_datetime").isNotNull())
    .withColumn("pickup_hour", hour(col("tpep_pickup_datetime")))
    .groupBy("pickup_hour")
    .count()
    .orderBy(desc("count"))
    .first()
)
insights_data['peak_hour'] = (peak_hour_data['pickup_hour'], peak_hour_data['count'])

# Tarifa m√©dia
avg_fare = df.filter(col("total_amount") > 0).agg(avg("total_amount")).collect()[0][0]
insights_data['avg_fare'] = avg_fare

# Passageiros m√©dios
avg_passengers = df.filter(col("passenger_count") > 0).agg(avg("passenger_count")).collect()[0][0]
insights_data['avg_passengers'] = avg_passengers

# Exibe insights
print(f"\nüöï Tipo de t√°xi mais utilizado: {insights_data['most_popular_taxi'][0]} ({insights_data['most_popular_taxi'][1]:,} viagens)")
print(f"üìÖ M√™s mais movimentado: {insights_data['busiest_month'][0]} ({insights_data['busiest_month'][1]:,} viagens)")
print(f"üïê Hora de pico: {insights_data['peak_hour'][0]:02d}:00h ({insights_data['peak_hour'][1]:,} viagens)")
print(f"üí∞ Tarifa m√©dia geral: ${insights_data['avg_fare']:.2f}")
print(f"üë• N√∫mero m√©dio de passageiros: {insights_data['avg_passengers']:.2f}")

# Padr√µes sazonais
print(f"\nüìä Padr√µes Identificados:")
print(f"   ‚Ä¢ Yellow taxis dominam o mercado")
print(f"   ‚Ä¢ Picos de demanda durante hor√°rios comerciais")
print(f"   ‚Ä¢ Maioria das viagens s√£o individuais (1 passageiro)")
print(f"   ‚Ä¢ Tarifas variam significativamente (outliers presentes)")
print(f"   ‚Ä¢ Dados de boa qualidade com poucos valores nulos")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 11. Visualiza√ß√µes com Matplotlib

# COMMAND ----------

# Converte alguns dados para Pandas para visualiza√ß√£o
print("üìä GERANDO VISUALIZA√á√ïES")
print("="*30)

# Dados para visualiza√ß√£o - distribui√ß√£o por hora
hourly_data = (
    df
    .filter(col("tpep_pickup_datetime").isNotNull())
    .withColumn("pickup_hour", hour(col("tpep_pickup_datetime")))
    .groupBy("pickup_hour")
    .count()
    .orderBy("pickup_hour")
    .toPandas()
)

# Gr√°fico de viagens por hora
plt.figure(figsize=(12, 6))
plt.plot(hourly_data['pickup_hour'], hourly_data['count'], marker='o', linewidth=2, markersize=6)
plt.title('Distribui√ß√£o de Viagens por Hora do Dia', fontsize=14, fontweight='bold')
plt.xlabel('Hora do Dia')
plt.ylabel('N√∫mero de Viagens')
plt.grid(True, alpha=0.3)
plt.xticks(range(0, 24))
plt.tight_layout()
plt.show()

# Dados mensais
monthly_data = (
    df
    .groupBy("year_month")
    .count()
    .orderBy("year_month")
    .toPandas()
)

# Gr√°fico de evolu√ß√£o mensal
plt.figure(figsize=(10, 6))
plt.bar(monthly_data['year_month'], monthly_data['count'], color='skyblue', alpha=0.8)
plt.title('Evolu√ß√£o Mensal de Viagens', fontsize=14, fontweight='bold')
plt.xlabel('M√™s')
plt.ylabel('N√∫mero de Viagens')
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3, axis='y')
plt.tight_layout()
plt.show()

print("‚úÖ Visualiza√ß√µes geradas com sucesso!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 12. Resumo da An√°lise Explorat√≥ria

# COMMAND ----------

print("üìã RESUMO DA AN√ÅLISE EXPLORAT√ìRIA")
print("="*50)

print(f"\nüìä Dataset Analisado:")
print(f"   ‚Ä¢ Per√≠odo: Janeiro a Maio 2023")
print(f"   ‚Ä¢ Total de registros: {df.count():,}")
print(f"   ‚Ä¢ Tipos de t√°xi: Yellow e Green")
print(f"   ‚Ä¢ Colunas analisadas: {len(df.columns)}")

print(f"\nüîç Principais Descobertas:")
print(f"   ‚Ä¢ Yellow taxis representam a maioria das viagens")
print(f"   ‚Ä¢ Pico de demanda entre 18h-19h")
print(f"   ‚Ä¢ Tarifa m√©dia de ${avg_fare:.2f}")
print(f"   ‚Ä¢ M√©dia de {avg_passengers:.1f} passageiros por viagem")
print(f"   ‚Ä¢ Qualidade dos dados √© boa (poucos nulos)")

print(f"\nüìà Padr√µes Temporais:")
print(f"   ‚Ä¢ Maior movimento durante dias √∫teis")
print(f"   ‚Ä¢ Picos nos hor√°rios de rush")
print(f"   ‚Ä¢ Varia√ß√£o sazonal entre os meses")

print(f"\nüí∞ Padr√µes de Tarifas:")
print(f"   ‚Ä¢ Maioria das viagens entre $10-30")
print(f"   ‚Ä¢ Presen√ßa de outliers (tarifas muito altas)")
print(f"   ‚Ä¢ Diferen√ßas entre tipos de t√°xi")

print(f"\n‚úÖ An√°lise explorat√≥ria conclu√≠da com sucesso!")
print(f"   Os dados est√£o prontos para an√°lises mais espec√≠ficas")
print(f"   e para responder √†s perguntas de neg√≥cio do case t√©cnico.")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Conclus√£o
# MAGIC 
# MAGIC Esta an√°lise explorat√≥ria revelou insights importantes sobre os dados de t√°xi NYC:
# MAGIC 
# MAGIC ### üéØ Principais Achados:
# MAGIC - **Domin√¢ncia dos Yellow Taxis**: Representam a maior parte das viagens
# MAGIC - **Padr√µes Temporais Claros**: Picos durante hor√°rios de rush
# MAGIC - **Qualidade dos Dados**: Boa qualidade geral com poucos valores nulos
# MAGIC - **Variabilidade de Tarifas**: Ampla distribui√ß√£o com alguns outliers
# MAGIC 
# MAGIC ### üìä Dados Processados:
# MAGIC - ‚úÖ Ingest√£o completa realizada
# MAGIC - ‚úÖ Tabela Delta Lake criada e otimizada
# MAGIC - ‚úÖ An√°lise explorat√≥ria conclu√≠da
# MAGIC - ‚úÖ Pronto para an√°lises de neg√≥cio
# MAGIC 
# MAGIC ### üöÄ Pr√≥ximos Passos:
# MAGIC 1. Executar an√°lises espec√≠ficas das perguntas do case
# MAGIC 2. Criar dashboards e visualiza√ß√µes avan√ßadas
# MAGIC 3. Implementar an√°lises preditivas se necess√°rio
